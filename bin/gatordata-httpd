#!/usr/bin/env node

MASCP = require('mascp-jstools');

var argv =  require('optimist').argv;

var port = argv.port || 3000;

var resource_map = {
    'tair'      : MASCP.TairReader,
    'atchloro'  : MASCP.AtChloroReader,
    'atpeptide' : MASCP.AtPeptideReader,
    'pep2pro'   : MASCP.Pep2ProReader,
    'gelmap'    : MASCP.GelMapReader,
    'pubmed'    : MASCP.PubmedReader,
    'interpro'  : MASCP.InterproReader,
    'p3db'      : MASCP.P3dbReader,
    'phosphat'  : MASCP.PhosphatReader,
    'ppdb'      : MASCP.PpdbReader,
    'promex'    : MASCP.PromexReader,
    'rippdb'    : MASCP.RippdbReader,
    'suba'      : MASCP.SubaReader,
    'ArbitraryData' : MASCP.ArbitraryDataReader,
    'rnaedit'   : MASCP.RnaEditReader,
    'ubiquitin' : MASCP.UbiquitinReader,
    'processing': MASCP.ProcessingReader,
    'nssnps'    : MASCP.SnpReader,
};

repl = require('repl');

MASCP.events.once('ready',function() {
    MASCP.Service.BeginCaching();
    var express = require('express'),
        app = express.createServer();

    app.configure(function() {
        app.use(express.bodyParser());
        app.use(express.static(__dirname + '/../www'));
        app.use(express.static(__dirname + '/../node_modules/mascp-jstools/dist'));
        app.use(app.router);
    });
    
    if (argv.static) {
        app.listen(port,'127.0.0.1');
        console.log('Server running at http://127.0.0.1:'+port+'/');
        return;
    }

    app.get("/", function(req, res) {
      res.redirect("/index.html");
    });

    var data_headers = function(req,res,next) {
        res.header('Content-type', 'application/json');
        res.header('Access-Control-Allow-Headers','x-requested-with');
        res.header('Access-Control-Max-Age','1728000');
        res.header('Access-Control-Allow-Origin','*');
        res.header('Access-Control-Allow-Methods','*');        
        next();
    }

    app.post('/data/*',data_headers);
    app.get('/data/*',data_headers);

    app.get('/data/history/:resource/:date/:agi',function(req,res,next) {
        var service = service_object(req);
        var date = new Date(Date.parse(req.param('date')+' UTC'));
        MASCP.Service.SetMaximumAge(date);
        if ( ! service)  {
            res.send({"error" : "No service"}, 404);
            return;
        }
        service.retrieve(req.param('agi'),function(err) {
            if (! this.result || this.result === null || ! this.result._raw_data || ! this.result._raw_data.retrieved) {
                res.send({"error" : "No data"},404);
                return;
            }
            if (this.result._raw_data.retrieved.getTime() != date.getTime()) {
                var actual = this.result._raw_data.retrieved;
                console.log("redirecting to "+actual);
                var daystring = actual.getUTCDate();
                if (daystring < 10) {
                    daystring = '0'+daystring.toString();
                }
                var monthstring = actual.getUTCMonth()+1;
                if (monthstring < 10) {
                    monthstring = '0'+monthstring.toString();
                }
                res.redirect("/data/history/"+req.param('resource')+'/'+actual.getUTCFullYear()+'-'+monthstring+'-'+daystring+'/'+req.param('agi'));
            } else {
                res.send(this.result ? this.result._raw_data : {},200);
            }
        });
    });
    
    app.get('/data/latest/gator',function(req,res,next) {
        var agi = req.query.agi || req.query.acc;
        get_latest(agi,service_object(req),res);
    });
    app.post('/data/latest/gator',function(req,res,next) {
        var agi = req.body.agi || req.body.acc;
        get_latest(agi,service_object(req),res);
    });

    app.get('/data/latest/gator/:acc',function(req,res,next) {
        var acc = req.param('acc') || req.query.acc || req.query.agi;
        get_latest(acc,service_object(req),res);        
    });

    var service_object = function(req) {
        req.query = req.query || {};
        req.body = req.body || {};
        var resource = req.param('resource') || req.query.service || req.body.service;
        var clazz = resource_map[resource];
        if ( ! clazz ) {
            return;
        }
        var obj = new clazz(null,null);
        if (clazz == MASCP.ArbitraryDataReader) {
            obj = obj._extend(req.query.dataset || req.body.dataset);
        }
        return obj;
    };

    var get_latest = function(agi,service,res) {
        if ( ! service)  {
            res.send({"error" : "No service"}, 404);
            return;
        }
        MASCP.Service.SetMaximumAge(0);
        service.retrieve(agi,function(err) {
            if (err || this.result && this.result._raw_data && this.result._raw_data.nodeName) {
                res.send(err.error ? { "error" : err.error } : { "error" : err },200);
            } else {
                res.send(this.result ? this.result._raw_data : {"error" : "No data"},200);
            }
        });        
    }
    
    app.get('/data/latest/:resource',function(req,res,next) {
        get_latest(req.param('agi'), service_object(req),res);
    });
    
    app.get('/data/latest/:resource/:agi',function(req,res,next) {
        get_latest(req.param('agi'), service_object(req), res);
    });

    app.listen(port,'127.0.0.1');
    console.log('Server running at http://127.0.0.1:'+port+'/');

    if (! require('tty').isatty(process.stdin)) {
        var vm = require('vm');
        vm.runInNewContext(require('fs').readFileSync('/dev/stdin').toString(), { resource_map: resource_map, require: require, console: console, MASCP: MASCP, module: module }, "<stdin>");
    } else {
        repl.start("Gator data server >");
        repl.repl.context.resource_map = resource_map;
    }

});

MASCP.events.emit('ready');
